# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_sdk/RobotInfoRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotInfoRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "interbotix_sdk/RobotInfoRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Get robot information
#
# Note that all data that is returned in a vector is organized such that each index
# corresponds to the joint at the same index as it appears in the joint_states topic.
# Gripper info is NOT included in the vectors.
#
# Multiple types of robot information are provided, including:
#   1) joint_names - the names of all joints in the robot
#   2) joint_ids - the Dynamixel IDs for all joints in the robot
#   3) lower_joint_limits - the lower joint limits in radians (taken from URDF)
#   4) upper_joint_limits - the upper joint limits in radians (taken from URDF)
#   5) velocity_limits - the velocity limits in rad/s (taken from URDF)
#   6) lower_gripper_limit - the lower gripper limit in radians (taken from URDF)
#   7) upper_gripper_limit - the upper gripper limit in radians (taken from URDF)
#   8) use_gripper - True if the driver node can control the gripper - otherwise, False
#   9) home_pos - home position for each robot; essentially commands all joints
#                 (excluding gripper) to 0 radians (taken from arm_poses.h)
#   10) sleep_pos - sleep position for each robot; essentially commands all joints
#                   (excluding gripper) to a specific position in radians so that
#                   if the driver node is shutdown (which torques off all motors),
#                   the arm doesn't come crashing down (taken from arm_poses.h)
#   11) num_joints - the number of joints in the arm (excluding gripper)

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotInfoRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_sdk/RobotInfoResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotInfoResponse(genpy.Message):
  _md5sum = "70459aca45ba9968340a3675aa77a130"
  _type = "interbotix_sdk/RobotInfoResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# joint names appear in the same order as they do in the joint_states.name vector
string[] joint_names
uint8[] joint_ids
float64[] lower_joint_limits
float64[] upper_joint_limits
float64[] velocity_limits
float64 lower_gripper_limit
float64 upper_gripper_limit
bool use_gripper
float64[] home_pos
float64[] sleep_pos
int8 num_joints

"""
  __slots__ = ['joint_names','joint_ids','lower_joint_limits','upper_joint_limits','velocity_limits','lower_gripper_limit','upper_gripper_limit','use_gripper','home_pos','sleep_pos','num_joints']
  _slot_types = ['string[]','uint8[]','float64[]','float64[]','float64[]','float64','float64','bool','float64[]','float64[]','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_names,joint_ids,lower_joint_limits,upper_joint_limits,velocity_limits,lower_gripper_limit,upper_gripper_limit,use_gripper,home_pos,sleep_pos,num_joints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotInfoResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_names is None:
        self.joint_names = []
      if self.joint_ids is None:
        self.joint_ids = b''
      if self.lower_joint_limits is None:
        self.lower_joint_limits = []
      if self.upper_joint_limits is None:
        self.upper_joint_limits = []
      if self.velocity_limits is None:
        self.velocity_limits = []
      if self.lower_gripper_limit is None:
        self.lower_gripper_limit = 0.
      if self.upper_gripper_limit is None:
        self.upper_gripper_limit = 0.
      if self.use_gripper is None:
        self.use_gripper = False
      if self.home_pos is None:
        self.home_pos = []
      if self.sleep_pos is None:
        self.sleep_pos = []
      if self.num_joints is None:
        self.num_joints = 0
    else:
      self.joint_names = []
      self.joint_ids = b''
      self.lower_joint_limits = []
      self.upper_joint_limits = []
      self.velocity_limits = []
      self.lower_gripper_limit = 0.
      self.upper_gripper_limit = 0.
      self.use_gripper = False
      self.home_pos = []
      self.sleep_pos = []
      self.num_joints = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.joint_ids
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.lower_joint_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.lower_joint_limits))
      length = len(self.upper_joint_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.upper_joint_limits))
      length = len(self.velocity_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.velocity_limits))
      _x = self
      buff.write(_get_struct_2dB().pack(_x.lower_gripper_limit, _x.upper_gripper_limit, _x.use_gripper))
      length = len(self.home_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.home_pos))
      length = len(self.sleep_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.sleep_pos))
      _x = self.num_joints
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.joint_ids = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lower_joint_limits = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.upper_joint_limits = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_limits = s.unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.lower_gripper_limit, _x.upper_gripper_limit, _x.use_gripper,) = _get_struct_2dB().unpack(str[start:end])
      self.use_gripper = bool(self.use_gripper)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.home_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sleep_pos = s.unpack(str[start:end])
      start = end
      end += 1
      (self.num_joints,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.joint_ids
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.lower_joint_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lower_joint_limits.tostring())
      length = len(self.upper_joint_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.upper_joint_limits.tostring())
      length = len(self.velocity_limits)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_limits.tostring())
      _x = self
      buff.write(_get_struct_2dB().pack(_x.lower_gripper_limit, _x.upper_gripper_limit, _x.use_gripper))
      length = len(self.home_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.home_pos.tostring())
      length = len(self.sleep_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.sleep_pos.tostring())
      _x = self.num_joints
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.joint_ids = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lower_joint_limits = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.upper_joint_limits = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity_limits = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 17
      (_x.lower_gripper_limit, _x.upper_gripper_limit, _x.use_gripper,) = _get_struct_2dB().unpack(str[start:end])
      self.use_gripper = bool(self.use_gripper)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.home_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sleep_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.num_joints,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class RobotInfo(object):
  _type          = 'interbotix_sdk/RobotInfo'
  _md5sum = '70459aca45ba9968340a3675aa77a130'
  _request_class  = RobotInfoRequest
  _response_class = RobotInfoResponse
