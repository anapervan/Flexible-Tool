# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_joy_control/JoyControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JoyControl(genpy.Message):
  _md5sum = "6ec2643e78211f908d62b7a582965053"
  _type = "interbotix_joy_control/JoyControl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Send commands from the joy_node to the modern_robotics_ik node

# enum values that define the joystick controls for the robot

# Control the motion of the waist joint
int8 WAIST_CCW = 1
int8 WAIST_CW = 2

# Control the motion of the virtual 'ee_arm_link' or end effector using the modern_robotics_ik engine.
int8 EE_UP = 3
int8 EE_DOWN = 4
int8 EE_FORWARD = 5
int8 EE_BACKWARD = 6

# Control the motion of the wrist_angle joint
int8 WRIST_ANGLE_CCW = 7
int8 WRIST_ANGLE_CW = 8

# Control the motion of the wrist_rotate joint
int8 WRIST_ROTATE_CCW = 9
int8 WRIST_ROTATE_CW = 10

# Control the actual gripper
int8 GRIPPER_OPEN = 11
int8 GRIPPER_CLOSE = 12

# Control the speed that the robot arm moves
int8 ARM_LOW_SPEED = 13
int8 ARM_HIGH_SPEED = 14

# Quickly toggle between a fast and slow speed setting
int8 ARM_COURSE_SPEED = 15
int8 ARM_FINE_SPEED = 16

# Control the pwm that the gripper is commanded
int8 GRIPPER_LOW_PWM = 17
int8 GRIPPER_HIGH_PWM = 18

# Set robot to specific pose
int8 HOME_POSE = 19
int8 SLEEP_POSE = 20

int8 waist_cmd
int8 ee_z_cmd
int8 ee_x_cmd
int8 wrist_angle_cmd
int8 wrist_rotate_cmd
int8 gripper_cmd
int8 arm_speed_cmd
int8 arm_toggle_speed_cmd
int8 gripper_pwm_cmd
int8 robot_pose
"""
  # Pseudo-constants
  WAIST_CCW = 1
  WAIST_CW = 2
  EE_UP = 3
  EE_DOWN = 4
  EE_FORWARD = 5
  EE_BACKWARD = 6
  WRIST_ANGLE_CCW = 7
  WRIST_ANGLE_CW = 8
  WRIST_ROTATE_CCW = 9
  WRIST_ROTATE_CW = 10
  GRIPPER_OPEN = 11
  GRIPPER_CLOSE = 12
  ARM_LOW_SPEED = 13
  ARM_HIGH_SPEED = 14
  ARM_COURSE_SPEED = 15
  ARM_FINE_SPEED = 16
  GRIPPER_LOW_PWM = 17
  GRIPPER_HIGH_PWM = 18
  HOME_POSE = 19
  SLEEP_POSE = 20

  __slots__ = ['waist_cmd','ee_z_cmd','ee_x_cmd','wrist_angle_cmd','wrist_rotate_cmd','gripper_cmd','arm_speed_cmd','arm_toggle_speed_cmd','gripper_pwm_cmd','robot_pose']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waist_cmd,ee_z_cmd,ee_x_cmd,wrist_angle_cmd,wrist_rotate_cmd,gripper_cmd,arm_speed_cmd,arm_toggle_speed_cmd,gripper_pwm_cmd,robot_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JoyControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.waist_cmd is None:
        self.waist_cmd = 0
      if self.ee_z_cmd is None:
        self.ee_z_cmd = 0
      if self.ee_x_cmd is None:
        self.ee_x_cmd = 0
      if self.wrist_angle_cmd is None:
        self.wrist_angle_cmd = 0
      if self.wrist_rotate_cmd is None:
        self.wrist_rotate_cmd = 0
      if self.gripper_cmd is None:
        self.gripper_cmd = 0
      if self.arm_speed_cmd is None:
        self.arm_speed_cmd = 0
      if self.arm_toggle_speed_cmd is None:
        self.arm_toggle_speed_cmd = 0
      if self.gripper_pwm_cmd is None:
        self.gripper_pwm_cmd = 0
      if self.robot_pose is None:
        self.robot_pose = 0
    else:
      self.waist_cmd = 0
      self.ee_z_cmd = 0
      self.ee_x_cmd = 0
      self.wrist_angle_cmd = 0
      self.wrist_rotate_cmd = 0
      self.gripper_cmd = 0
      self.arm_speed_cmd = 0
      self.arm_toggle_speed_cmd = 0
      self.gripper_pwm_cmd = 0
      self.robot_pose = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10b().pack(_x.waist_cmd, _x.ee_z_cmd, _x.ee_x_cmd, _x.wrist_angle_cmd, _x.wrist_rotate_cmd, _x.gripper_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.gripper_pwm_cmd, _x.robot_pose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.waist_cmd, _x.ee_z_cmd, _x.ee_x_cmd, _x.wrist_angle_cmd, _x.wrist_rotate_cmd, _x.gripper_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.gripper_pwm_cmd, _x.robot_pose,) = _get_struct_10b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10b().pack(_x.waist_cmd, _x.ee_z_cmd, _x.ee_x_cmd, _x.wrist_angle_cmd, _x.wrist_rotate_cmd, _x.gripper_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.gripper_pwm_cmd, _x.robot_pose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.waist_cmd, _x.ee_z_cmd, _x.ee_x_cmd, _x.wrist_angle_cmd, _x.wrist_rotate_cmd, _x.gripper_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.gripper_pwm_cmd, _x.robot_pose,) = _get_struct_10b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10b = None
def _get_struct_10b():
    global _struct_10b
    if _struct_10b is None:
        _struct_10b = struct.Struct("<10b")
    return _struct_10b
