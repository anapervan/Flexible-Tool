# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interbotix_turret_control/TurretControl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TurretControl(genpy.Message):
  _md5sum = "3e39c9e14721edfb6fd43b3f34f67c7c"
  _type = "interbotix_turret_control/TurretControl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Send commands from the joy_node to the turret_control node

# enum values that define the joystick controls for the robot

# Control the motion of the pan joint
int8 PAN_CCW = 1
int8 PAN_CW = 2

# Control the motion of the tilt joint
int8 TILT_CCW = 3
int8 TILT_CW = 4

# Control the speed that the robot arm moves
int8 ARM_LOW_SPEED = 5
int8 ARM_HIGH_SPEED = 6

# Quickly toggle between a fast and slow speed setting
int8 ARM_COURSE_SPEED = 7
int8 ARM_FINE_SPEED = 8

# Set robot to specific pose
int8 HOME_POSE = 9

int8 pan_cmd
int8 tilt_cmd
int8 arm_speed_cmd
int8 arm_toggle_speed_cmd
int8 robot_pose
"""
  # Pseudo-constants
  PAN_CCW = 1
  PAN_CW = 2
  TILT_CCW = 3
  TILT_CW = 4
  ARM_LOW_SPEED = 5
  ARM_HIGH_SPEED = 6
  ARM_COURSE_SPEED = 7
  ARM_FINE_SPEED = 8
  HOME_POSE = 9

  __slots__ = ['pan_cmd','tilt_cmd','arm_speed_cmd','arm_toggle_speed_cmd','robot_pose']
  _slot_types = ['int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pan_cmd,tilt_cmd,arm_speed_cmd,arm_toggle_speed_cmd,robot_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TurretControl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pan_cmd is None:
        self.pan_cmd = 0
      if self.tilt_cmd is None:
        self.tilt_cmd = 0
      if self.arm_speed_cmd is None:
        self.arm_speed_cmd = 0
      if self.arm_toggle_speed_cmd is None:
        self.arm_toggle_speed_cmd = 0
      if self.robot_pose is None:
        self.robot_pose = 0
    else:
      self.pan_cmd = 0
      self.tilt_cmd = 0
      self.arm_speed_cmd = 0
      self.arm_toggle_speed_cmd = 0
      self.robot_pose = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5b().pack(_x.pan_cmd, _x.tilt_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.robot_pose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.pan_cmd, _x.tilt_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.robot_pose,) = _get_struct_5b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5b().pack(_x.pan_cmd, _x.tilt_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.robot_pose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.pan_cmd, _x.tilt_cmd, _x.arm_speed_cmd, _x.arm_toggle_speed_cmd, _x.robot_pose,) = _get_struct_5b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5b = None
def _get_struct_5b():
    global _struct_5b
    if _struct_5b is None:
        _struct_5b = struct.Struct("<5b")
    return _struct_5b
