// Generated by gencpp from file interbotix_sdk/OperatingModesRequest.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_SDK_MESSAGE_OPERATINGMODESREQUEST_H
#define INTERBOTIX_SDK_MESSAGE_OPERATINGMODESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_sdk
{
template <class ContainerAllocator>
struct OperatingModesRequest_
{
  typedef OperatingModesRequest_<ContainerAllocator> Type;

  OperatingModesRequest_()
    : arm_mode()
    , use_custom_arm_profiles(false)
    , arm_profile_velocity(0)
    , arm_profile_acceleration(0)
    , gripper_mode()
    , use_custom_gripper_profiles(false)
    , gripper_profile_velocity(0)
    , gripper_profile_acceleration(0)  {
    }
  OperatingModesRequest_(const ContainerAllocator& _alloc)
    : arm_mode(_alloc)
    , use_custom_arm_profiles(false)
    , arm_profile_velocity(0)
    , arm_profile_acceleration(0)
    , gripper_mode(_alloc)
    , use_custom_gripper_profiles(false)
    , gripper_profile_velocity(0)
    , gripper_profile_acceleration(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arm_mode_type;
  _arm_mode_type arm_mode;

   typedef uint8_t _use_custom_arm_profiles_type;
  _use_custom_arm_profiles_type use_custom_arm_profiles;

   typedef int32_t _arm_profile_velocity_type;
  _arm_profile_velocity_type arm_profile_velocity;

   typedef int32_t _arm_profile_acceleration_type;
  _arm_profile_acceleration_type arm_profile_acceleration;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_mode_type;
  _gripper_mode_type gripper_mode;

   typedef uint8_t _use_custom_gripper_profiles_type;
  _use_custom_gripper_profiles_type use_custom_gripper_profiles;

   typedef int32_t _gripper_profile_velocity_type;
  _gripper_profile_velocity_type gripper_profile_velocity;

   typedef int32_t _gripper_profile_acceleration_type;
  _gripper_profile_acceleration_type gripper_profile_acceleration;





  typedef boost::shared_ptr< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OperatingModesRequest_

typedef ::interbotix_sdk::OperatingModesRequest_<std::allocator<void> > OperatingModesRequest;

typedef boost::shared_ptr< ::interbotix_sdk::OperatingModesRequest > OperatingModesRequestPtr;
typedef boost::shared_ptr< ::interbotix_sdk::OperatingModesRequest const> OperatingModesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator1> & lhs, const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arm_mode == rhs.arm_mode &&
    lhs.use_custom_arm_profiles == rhs.use_custom_arm_profiles &&
    lhs.arm_profile_velocity == rhs.arm_profile_velocity &&
    lhs.arm_profile_acceleration == rhs.arm_profile_acceleration &&
    lhs.gripper_mode == rhs.gripper_mode &&
    lhs.use_custom_gripper_profiles == rhs.use_custom_gripper_profiles &&
    lhs.gripper_profile_velocity == rhs.gripper_profile_velocity &&
    lhs.gripper_profile_acceleration == rhs.gripper_profile_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator1> & lhs, const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f6f1b135f03cc8740935c2565835f76";
  }

  static const char* value(const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f6f1b135f03cc87ULL;
  static const uint64_t static_value2 = 0x40935c2565835f76ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_sdk/OperatingModesRequest";
  }

  static const char* value(const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Set the operating modes for the arm and/or gripper\n"
"#\n"
"# There are 5 valid operating modes for the arm. They are...\n"
"#   \"none\" - arm motors will not respond to any joint command\n"
"#   \"position\" - arm motors will expect only position commands\n"
"#   \"velocity\" - arm motors will expect only velocity commands\n"
"#   \"current\" - arm motors will expect only current commands\n"
"#   \"pwm\" - arm motors will expect only pwm commands\n"
"#\n"
"# The gripper can also be set to \"ext_position\". This allows the gripper to do\n"
"# multiple rotations instead of just one. It should only be used if you are using\n"
"# a custom gripper capable of doing more than one rotation.\n"
"#\n"
"# For \"position\" control, profile_velocity sets the max speed of each joint while\n"
"# profile_acceleration sets the max acceleration. Please reference the motor datasheet\n"
"# (just click a motor at http://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_workbench/)\n"
"# for conversion factors. Values can be between 0 and 32,767. If setting custom profiles,\n"
"# make sure to set 'use_custom_x_profiles' to true.\n"
"#\n"
"# For \"velocity\" control, only profile_acceleration is used.\n"
"#\n"
"# The velocity and acceleration profiles are not used in the \"current\" and \"pwm\" modes.\n"
"#\n"
"# Note that if the arm or gripper mode options are not set, the service will ignore\n"
"# them. This is useful if you only want to change one operating mode and not the other.\n"
"\n"
"string arm_mode\n"
"bool use_custom_arm_profiles\n"
"int32 arm_profile_velocity\n"
"int32 arm_profile_acceleration\n"
"\n"
"string gripper_mode\n"
"bool use_custom_gripper_profiles\n"
"int32 gripper_profile_velocity\n"
"int32 gripper_profile_acceleration\n"
;
  }

  static const char* value(const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_mode);
      stream.next(m.use_custom_arm_profiles);
      stream.next(m.arm_profile_velocity);
      stream.next(m.arm_profile_acceleration);
      stream.next(m.gripper_mode);
      stream.next(m.use_custom_gripper_profiles);
      stream.next(m.gripper_profile_velocity);
      stream.next(m.gripper_profile_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OperatingModesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_sdk::OperatingModesRequest_<ContainerAllocator>& v)
  {
    s << indent << "arm_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arm_mode);
    s << indent << "use_custom_arm_profiles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_custom_arm_profiles);
    s << indent << "arm_profile_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arm_profile_velocity);
    s << indent << "arm_profile_acceleration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arm_profile_acceleration);
    s << indent << "gripper_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_mode);
    s << indent << "use_custom_gripper_profiles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_custom_gripper_profiles);
    s << indent << "gripper_profile_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gripper_profile_velocity);
    s << indent << "gripper_profile_acceleration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gripper_profile_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_SDK_MESSAGE_OPERATINGMODESREQUEST_H
