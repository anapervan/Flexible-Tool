// Generated by gencpp from file interbotix_sdk/RegisterValuesRequest.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_SDK_MESSAGE_REGISTERVALUESREQUEST_H
#define INTERBOTIX_SDK_MESSAGE_REGISTERVALUESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_sdk
{
template <class ContainerAllocator>
struct RegisterValuesRequest_
{
  typedef RegisterValuesRequest_<ContainerAllocator> Type;

  RegisterValuesRequest_()
    : cmd(0)
    , id(0)
    , addr_name()
    , value(0)  {
    }
  RegisterValuesRequest_(const ContainerAllocator& _alloc)
    : cmd(0)
    , id(0)
    , addr_name(_alloc)
    , value(0)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;

   typedef uint8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _addr_name_type;
  _addr_name_type addr_name;

   typedef int32_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ARM_JOINTS_AND_GRIPPER)
  #undef ARM_JOINTS_AND_GRIPPER
#endif
#if defined(_WIN32) && defined(ARM_JOINTS)
  #undef ARM_JOINTS
#endif
#if defined(_WIN32) && defined(GRIPPER)
  #undef GRIPPER
#endif
#if defined(_WIN32) && defined(SINGLE_MOTOR)
  #undef SINGLE_MOTOR
#endif

  enum {
    ARM_JOINTS_AND_GRIPPER = 1,
    ARM_JOINTS = 2,
    GRIPPER = 3,
    SINGLE_MOTOR = 4,
  };


  typedef boost::shared_ptr< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RegisterValuesRequest_

typedef ::interbotix_sdk::RegisterValuesRequest_<std::allocator<void> > RegisterValuesRequest;

typedef boost::shared_ptr< ::interbotix_sdk::RegisterValuesRequest > RegisterValuesRequestPtr;
typedef boost::shared_ptr< ::interbotix_sdk::RegisterValuesRequest const> RegisterValuesRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator1> & lhs, const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.id == rhs.id &&
    lhs.addr_name == rhs.addr_name &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator1> & lhs, const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26ea0b553923e1bf0195e17062470045";
  }

  static const char* value(const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26ea0b553923e1bfULL;
  static const uint64_t static_value2 = 0x0195e17062470045ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_sdk/RegisterValuesRequest";
  }

  static const char* value(const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Set or get the register(s) value(s) from motor(s)\n"
"#\n"
"# To get familiar with the register values, go to...\n"
"# http://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_workbench/\n"
"# ...click on a motor model, and scroll down to the 'Control Table of RAM Area' section.\n"
"#\n"
"# There are four options to set or get a register value:\n"
"#   1) ARM_JOINTS_AND_GRIPPER - affects the register values for all joints, including the gripper.\n"
"#   2) ARM_JOINTS - affects the register values for all joints, excluding the gripper.\n"
"#   3) GRIPPER - affects the register value only for the gripper\n"
"#   4) SINGLE_MOTOR - affects the register value for the motor specified by the 'id' parameter.\n"
"#                     Note that the 'id' parameter only needs to be used for this option. For any\n"
"#                     other option, it can be left blank.\n"
"# Set the option to the 'cmd' parameter and the 'id' to the specified motor (if doing the\n"
"# SINGLE_MOTOR option). 'id' is equivalent to the Dynamixel ID of the motor. To look up the motor IDs,\n"
"# check out the robot-specific motor config files in the interbotix_sdk/config directory.\n"
"#\n"
"# Next, set the 'addr_name' parameter to the name of the register to be written to or read from.\n"
"#\n"
"# If setting the register(s) value, set the 'value' parameter to the desired value. This value will be\n"
"# written to either one or many motors depending on the 'cmd' option selected. Note that if a joint is\n"
"# controlled by two motors, both motors will be updated with the desired value.\n"
"#\n"
"# If reading the register(s) values, do not set the 'value' parameter. Instead, call the service at this\n"
"# stage. The 'values' vector will be automatically updated with the register(s) value(s). If reading from\n"
"# multiple joints at a time, the indexes of the values correspond with the joint names at those indexes in the\n"
"# joint_states.name vector.\n"
"\n"
"int8 ARM_JOINTS_AND_GRIPPER = 1\n"
"int8 ARM_JOINTS = 2\n"
"int8 GRIPPER = 3\n"
"int8 SINGLE_MOTOR = 4\n"
"\n"
"int8 cmd\n"
"uint8 id\n"
"string addr_name\n"
"int32 value\n"
;
  }

  static const char* value(const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.id);
      stream.next(m.addr_name);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegisterValuesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_sdk::RegisterValuesRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "addr_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.addr_name);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_SDK_MESSAGE_REGISTERVALUESREQUEST_H
