// Generated by gencpp from file testing_environment_moveit/CustomAngleRequest.msg
// DO NOT EDIT!


#ifndef TESTING_ENVIRONMENT_MOVEIT_MESSAGE_CUSTOMANGLEREQUEST_H
#define TESTING_ENVIRONMENT_MOVEIT_MESSAGE_CUSTOMANGLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testing_environment_moveit
{
template <class ContainerAllocator>
struct CustomAngleRequest_
{
  typedef CustomAngleRequest_<ContainerAllocator> Type;

  CustomAngleRequest_()
    : arm_a_angles()
    , arm_b_angles()  {
    }
  CustomAngleRequest_(const ContainerAllocator& _alloc)
    : arm_a_angles(_alloc)
    , arm_b_angles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _arm_a_angles_type;
  _arm_a_angles_type arm_a_angles;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _arm_b_angles_type;
  _arm_b_angles_type arm_b_angles;





  typedef boost::shared_ptr< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CustomAngleRequest_

typedef ::testing_environment_moveit::CustomAngleRequest_<std::allocator<void> > CustomAngleRequest;

typedef boost::shared_ptr< ::testing_environment_moveit::CustomAngleRequest > CustomAngleRequestPtr;
typedef boost::shared_ptr< ::testing_environment_moveit::CustomAngleRequest const> CustomAngleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator1> & lhs, const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arm_a_angles == rhs.arm_a_angles &&
    lhs.arm_b_angles == rhs.arm_b_angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator1> & lhs, const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace testing_environment_moveit

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a04862b47749bf3d91cb040c5b55f914";
  }

  static const char* value(const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa04862b47749bf3dULL;
  static const uint64_t static_value2 = 0x91cb040c5b55f914ULL;
};

template<class ContainerAllocator>
struct DataType< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testing_environment_moveit/CustomAngleRequest";
  }

  static const char* value(const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# angles for arm A\n"
"float64[] arm_a_angles\n"
"\n"
"# angles for arm B\n"
"float64[] arm_b_angles\n"
;
  }

  static const char* value(const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_a_angles);
      stream.next(m.arm_b_angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomAngleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testing_environment_moveit::CustomAngleRequest_<ContainerAllocator>& v)
  {
    s << indent << "arm_a_angles[]" << std::endl;
    for (size_t i = 0; i < v.arm_a_angles.size(); ++i)
    {
      s << indent << "  arm_a_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.arm_a_angles[i]);
    }
    s << indent << "arm_b_angles[]" << std::endl;
    for (size_t i = 0; i < v.arm_b_angles.size(); ++i)
    {
      s << indent << "  arm_b_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.arm_b_angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTING_ENVIRONMENT_MOVEIT_MESSAGE_CUSTOMANGLEREQUEST_H
