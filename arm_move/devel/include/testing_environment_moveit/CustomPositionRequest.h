// Generated by gencpp from file testing_environment_moveit/CustomPositionRequest.msg
// DO NOT EDIT!


#ifndef TESTING_ENVIRONMENT_MOVEIT_MESSAGE_CUSTOMPOSITIONREQUEST_H
#define TESTING_ENVIRONMENT_MOVEIT_MESSAGE_CUSTOMPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testing_environment_moveit
{
template <class ContainerAllocator>
struct CustomPositionRequest_
{
  typedef CustomPositionRequest_<ContainerAllocator> Type;

  CustomPositionRequest_()
    : arm_a_x_pos(0.0)
    , arm_a_y_pos(0.0)
    , arm_a_z_pos(0.0)
    , arm_b_x_pos(0.0)
    , arm_b_y_pos(0.0)
    , arm_b_z_pos(0.0)  {
    }
  CustomPositionRequest_(const ContainerAllocator& _alloc)
    : arm_a_x_pos(0.0)
    , arm_a_y_pos(0.0)
    , arm_a_z_pos(0.0)
    , arm_b_x_pos(0.0)
    , arm_b_y_pos(0.0)
    , arm_b_z_pos(0.0)  {
  (void)_alloc;
    }



   typedef double _arm_a_x_pos_type;
  _arm_a_x_pos_type arm_a_x_pos;

   typedef double _arm_a_y_pos_type;
  _arm_a_y_pos_type arm_a_y_pos;

   typedef double _arm_a_z_pos_type;
  _arm_a_z_pos_type arm_a_z_pos;

   typedef double _arm_b_x_pos_type;
  _arm_b_x_pos_type arm_b_x_pos;

   typedef double _arm_b_y_pos_type;
  _arm_b_y_pos_type arm_b_y_pos;

   typedef double _arm_b_z_pos_type;
  _arm_b_z_pos_type arm_b_z_pos;





  typedef boost::shared_ptr< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CustomPositionRequest_

typedef ::testing_environment_moveit::CustomPositionRequest_<std::allocator<void> > CustomPositionRequest;

typedef boost::shared_ptr< ::testing_environment_moveit::CustomPositionRequest > CustomPositionRequestPtr;
typedef boost::shared_ptr< ::testing_environment_moveit::CustomPositionRequest const> CustomPositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator1> & lhs, const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arm_a_x_pos == rhs.arm_a_x_pos &&
    lhs.arm_a_y_pos == rhs.arm_a_y_pos &&
    lhs.arm_a_z_pos == rhs.arm_a_z_pos &&
    lhs.arm_b_x_pos == rhs.arm_b_x_pos &&
    lhs.arm_b_y_pos == rhs.arm_b_y_pos &&
    lhs.arm_b_z_pos == rhs.arm_b_z_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator1> & lhs, const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace testing_environment_moveit

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23304a51cb2971aef33a4c038286d08b";
  }

  static const char* value(const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23304a51cb2971aeULL;
  static const uint64_t static_value2 = 0xf33a4c038286d08bULL;
};

template<class ContainerAllocator>
struct DataType< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testing_environment_moveit/CustomPositionRequest";
  }

  static const char* value(const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# x,y,z and yaw angle for arm A with respect to origin\n"
"float64 arm_a_x_pos\n"
"float64 arm_a_y_pos\n"
"float64 arm_a_z_pos\n"
"\n"
"# x,y,z and yaw angle for arm B with respect to origin\n"
"float64 arm_b_x_pos\n"
"float64 arm_b_y_pos\n"
"float64 arm_b_z_pos\n"
;
  }

  static const char* value(const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_a_x_pos);
      stream.next(m.arm_a_y_pos);
      stream.next(m.arm_a_z_pos);
      stream.next(m.arm_b_x_pos);
      stream.next(m.arm_b_y_pos);
      stream.next(m.arm_b_z_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomPositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testing_environment_moveit::CustomPositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "arm_a_x_pos: ";
    Printer<double>::stream(s, indent + "  ", v.arm_a_x_pos);
    s << indent << "arm_a_y_pos: ";
    Printer<double>::stream(s, indent + "  ", v.arm_a_y_pos);
    s << indent << "arm_a_z_pos: ";
    Printer<double>::stream(s, indent + "  ", v.arm_a_z_pos);
    s << indent << "arm_b_x_pos: ";
    Printer<double>::stream(s, indent + "  ", v.arm_b_x_pos);
    s << indent << "arm_b_y_pos: ";
    Printer<double>::stream(s, indent + "  ", v.arm_b_y_pos);
    s << indent << "arm_b_z_pos: ";
    Printer<double>::stream(s, indent + "  ", v.arm_b_z_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTING_ENVIRONMENT_MOVEIT_MESSAGE_CUSTOMPOSITIONREQUEST_H
