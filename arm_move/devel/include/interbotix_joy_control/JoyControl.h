// Generated by gencpp from file interbotix_joy_control/JoyControl.msg
// DO NOT EDIT!


#ifndef INTERBOTIX_JOY_CONTROL_MESSAGE_JOYCONTROL_H
#define INTERBOTIX_JOY_CONTROL_MESSAGE_JOYCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interbotix_joy_control
{
template <class ContainerAllocator>
struct JoyControl_
{
  typedef JoyControl_<ContainerAllocator> Type;

  JoyControl_()
    : waist_cmd(0)
    , ee_z_cmd(0)
    , ee_x_cmd(0)
    , wrist_angle_cmd(0)
    , wrist_rotate_cmd(0)
    , gripper_cmd(0)
    , arm_speed_cmd(0)
    , arm_toggle_speed_cmd(0)
    , gripper_pwm_cmd(0)
    , robot_pose(0)  {
    }
  JoyControl_(const ContainerAllocator& _alloc)
    : waist_cmd(0)
    , ee_z_cmd(0)
    , ee_x_cmd(0)
    , wrist_angle_cmd(0)
    , wrist_rotate_cmd(0)
    , gripper_cmd(0)
    , arm_speed_cmd(0)
    , arm_toggle_speed_cmd(0)
    , gripper_pwm_cmd(0)
    , robot_pose(0)  {
  (void)_alloc;
    }



   typedef int8_t _waist_cmd_type;
  _waist_cmd_type waist_cmd;

   typedef int8_t _ee_z_cmd_type;
  _ee_z_cmd_type ee_z_cmd;

   typedef int8_t _ee_x_cmd_type;
  _ee_x_cmd_type ee_x_cmd;

   typedef int8_t _wrist_angle_cmd_type;
  _wrist_angle_cmd_type wrist_angle_cmd;

   typedef int8_t _wrist_rotate_cmd_type;
  _wrist_rotate_cmd_type wrist_rotate_cmd;

   typedef int8_t _gripper_cmd_type;
  _gripper_cmd_type gripper_cmd;

   typedef int8_t _arm_speed_cmd_type;
  _arm_speed_cmd_type arm_speed_cmd;

   typedef int8_t _arm_toggle_speed_cmd_type;
  _arm_toggle_speed_cmd_type arm_toggle_speed_cmd;

   typedef int8_t _gripper_pwm_cmd_type;
  _gripper_pwm_cmd_type gripper_pwm_cmd;

   typedef int8_t _robot_pose_type;
  _robot_pose_type robot_pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(WAIST_CCW)
  #undef WAIST_CCW
#endif
#if defined(_WIN32) && defined(WAIST_CW)
  #undef WAIST_CW
#endif
#if defined(_WIN32) && defined(EE_UP)
  #undef EE_UP
#endif
#if defined(_WIN32) && defined(EE_DOWN)
  #undef EE_DOWN
#endif
#if defined(_WIN32) && defined(EE_FORWARD)
  #undef EE_FORWARD
#endif
#if defined(_WIN32) && defined(EE_BACKWARD)
  #undef EE_BACKWARD
#endif
#if defined(_WIN32) && defined(WRIST_ANGLE_CCW)
  #undef WRIST_ANGLE_CCW
#endif
#if defined(_WIN32) && defined(WRIST_ANGLE_CW)
  #undef WRIST_ANGLE_CW
#endif
#if defined(_WIN32) && defined(WRIST_ROTATE_CCW)
  #undef WRIST_ROTATE_CCW
#endif
#if defined(_WIN32) && defined(WRIST_ROTATE_CW)
  #undef WRIST_ROTATE_CW
#endif
#if defined(_WIN32) && defined(GRIPPER_OPEN)
  #undef GRIPPER_OPEN
#endif
#if defined(_WIN32) && defined(GRIPPER_CLOSE)
  #undef GRIPPER_CLOSE
#endif
#if defined(_WIN32) && defined(ARM_LOW_SPEED)
  #undef ARM_LOW_SPEED
#endif
#if defined(_WIN32) && defined(ARM_HIGH_SPEED)
  #undef ARM_HIGH_SPEED
#endif
#if defined(_WIN32) && defined(ARM_COURSE_SPEED)
  #undef ARM_COURSE_SPEED
#endif
#if defined(_WIN32) && defined(ARM_FINE_SPEED)
  #undef ARM_FINE_SPEED
#endif
#if defined(_WIN32) && defined(GRIPPER_LOW_PWM)
  #undef GRIPPER_LOW_PWM
#endif
#if defined(_WIN32) && defined(GRIPPER_HIGH_PWM)
  #undef GRIPPER_HIGH_PWM
#endif
#if defined(_WIN32) && defined(HOME_POSE)
  #undef HOME_POSE
#endif
#if defined(_WIN32) && defined(SLEEP_POSE)
  #undef SLEEP_POSE
#endif

  enum {
    WAIST_CCW = 1,
    WAIST_CW = 2,
    EE_UP = 3,
    EE_DOWN = 4,
    EE_FORWARD = 5,
    EE_BACKWARD = 6,
    WRIST_ANGLE_CCW = 7,
    WRIST_ANGLE_CW = 8,
    WRIST_ROTATE_CCW = 9,
    WRIST_ROTATE_CW = 10,
    GRIPPER_OPEN = 11,
    GRIPPER_CLOSE = 12,
    ARM_LOW_SPEED = 13,
    ARM_HIGH_SPEED = 14,
    ARM_COURSE_SPEED = 15,
    ARM_FINE_SPEED = 16,
    GRIPPER_LOW_PWM = 17,
    GRIPPER_HIGH_PWM = 18,
    HOME_POSE = 19,
    SLEEP_POSE = 20,
  };


  typedef boost::shared_ptr< ::interbotix_joy_control::JoyControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interbotix_joy_control::JoyControl_<ContainerAllocator> const> ConstPtr;

}; // struct JoyControl_

typedef ::interbotix_joy_control::JoyControl_<std::allocator<void> > JoyControl;

typedef boost::shared_ptr< ::interbotix_joy_control::JoyControl > JoyControlPtr;
typedef boost::shared_ptr< ::interbotix_joy_control::JoyControl const> JoyControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interbotix_joy_control::JoyControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interbotix_joy_control::JoyControl_<ContainerAllocator1> & lhs, const ::interbotix_joy_control::JoyControl_<ContainerAllocator2> & rhs)
{
  return lhs.waist_cmd == rhs.waist_cmd &&
    lhs.ee_z_cmd == rhs.ee_z_cmd &&
    lhs.ee_x_cmd == rhs.ee_x_cmd &&
    lhs.wrist_angle_cmd == rhs.wrist_angle_cmd &&
    lhs.wrist_rotate_cmd == rhs.wrist_rotate_cmd &&
    lhs.gripper_cmd == rhs.gripper_cmd &&
    lhs.arm_speed_cmd == rhs.arm_speed_cmd &&
    lhs.arm_toggle_speed_cmd == rhs.arm_toggle_speed_cmd &&
    lhs.gripper_pwm_cmd == rhs.gripper_pwm_cmd &&
    lhs.robot_pose == rhs.robot_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interbotix_joy_control::JoyControl_<ContainerAllocator1> & lhs, const ::interbotix_joy_control::JoyControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interbotix_joy_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interbotix_joy_control::JoyControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interbotix_joy_control::JoyControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interbotix_joy_control::JoyControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ec2643e78211f908d62b7a582965053";
  }

  static const char* value(const ::interbotix_joy_control::JoyControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ec2643e78211f90ULL;
  static const uint64_t static_value2 = 0x8d62b7a582965053ULL;
};

template<class ContainerAllocator>
struct DataType< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interbotix_joy_control/JoyControl";
  }

  static const char* value(const ::interbotix_joy_control::JoyControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Send commands from the joy_node to the modern_robotics_ik node\n"
"\n"
"# enum values that define the joystick controls for the robot\n"
"\n"
"# Control the motion of the waist joint\n"
"int8 WAIST_CCW = 1\n"
"int8 WAIST_CW = 2\n"
"\n"
"# Control the motion of the virtual 'ee_arm_link' or end effector using the modern_robotics_ik engine.\n"
"int8 EE_UP = 3\n"
"int8 EE_DOWN = 4\n"
"int8 EE_FORWARD = 5\n"
"int8 EE_BACKWARD = 6\n"
"\n"
"# Control the motion of the wrist_angle joint\n"
"int8 WRIST_ANGLE_CCW = 7\n"
"int8 WRIST_ANGLE_CW = 8\n"
"\n"
"# Control the motion of the wrist_rotate joint\n"
"int8 WRIST_ROTATE_CCW = 9\n"
"int8 WRIST_ROTATE_CW = 10\n"
"\n"
"# Control the actual gripper\n"
"int8 GRIPPER_OPEN = 11\n"
"int8 GRIPPER_CLOSE = 12\n"
"\n"
"# Control the speed that the robot arm moves\n"
"int8 ARM_LOW_SPEED = 13\n"
"int8 ARM_HIGH_SPEED = 14\n"
"\n"
"# Quickly toggle between a fast and slow speed setting\n"
"int8 ARM_COURSE_SPEED = 15\n"
"int8 ARM_FINE_SPEED = 16\n"
"\n"
"# Control the pwm that the gripper is commanded\n"
"int8 GRIPPER_LOW_PWM = 17\n"
"int8 GRIPPER_HIGH_PWM = 18\n"
"\n"
"# Set robot to specific pose\n"
"int8 HOME_POSE = 19\n"
"int8 SLEEP_POSE = 20\n"
"\n"
"int8 waist_cmd\n"
"int8 ee_z_cmd\n"
"int8 ee_x_cmd\n"
"int8 wrist_angle_cmd\n"
"int8 wrist_rotate_cmd\n"
"int8 gripper_cmd\n"
"int8 arm_speed_cmd\n"
"int8 arm_toggle_speed_cmd\n"
"int8 gripper_pwm_cmd\n"
"int8 robot_pose\n"
;
  }

  static const char* value(const ::interbotix_joy_control::JoyControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waist_cmd);
      stream.next(m.ee_z_cmd);
      stream.next(m.ee_x_cmd);
      stream.next(m.wrist_angle_cmd);
      stream.next(m.wrist_rotate_cmd);
      stream.next(m.gripper_cmd);
      stream.next(m.arm_speed_cmd);
      stream.next(m.arm_toggle_speed_cmd);
      stream.next(m.gripper_pwm_cmd);
      stream.next(m.robot_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interbotix_joy_control::JoyControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interbotix_joy_control::JoyControl_<ContainerAllocator>& v)
  {
    s << indent << "waist_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.waist_cmd);
    s << indent << "ee_z_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_z_cmd);
    s << indent << "ee_x_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_x_cmd);
    s << indent << "wrist_angle_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wrist_angle_cmd);
    s << indent << "wrist_rotate_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wrist_rotate_cmd);
    s << indent << "gripper_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_cmd);
    s << indent << "arm_speed_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_speed_cmd);
    s << indent << "arm_toggle_speed_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_toggle_speed_cmd);
    s << indent << "gripper_pwm_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_pwm_cmd);
    s << indent << "robot_pose: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERBOTIX_JOY_CONTROL_MESSAGE_JOYCONTROL_H
