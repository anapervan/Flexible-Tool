#!/usr/bin/env python3
"""
This node uses moveit to do motion planning for the sawyer robot. 
This node combines combines services from the trajectory node in the arm_motion package 
and generate_pc node in the camera_reconstruct package to interface between the camera
and the turtlebot.
This node controls the sawyer arm to capture 4 views of the object from the front (side) 
and 1 view from the top (birds eye). 

"""

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import Pose, PoseStamped
from math import pi, tau, dist, fabs, cos


class MoveGroupPythonInterface(object):
    def __init__(self):
        super(MoveGroupPythonInterface, self).__init__()

        rospy.init_node('initial_move', anonymous=False)
        # joint_state_topic = ['joint_states:=/robot/joint_states']

        ## First initialize `moveit_commander`_ and a `rospy`_ node:
        moveit_commander.roscpp_initialize(sys.argv)
        
        robot = moveit_commander.RobotCommander()

        scene = moveit_commander.PlanningSceneInterface()

        group_name = "testing_environment"
        self.group = moveit_commander.MoveGroupCommander(group_name)

        display_trajectory_publisher = rospy.Publisher("move_group/display_planned_path",
                                                        moveit_msgs.msg.DisplayTrajectory,
                                                        queue_size=20)
      

        """
        Move robot to pre-defined armA and armB position
        """
        rospy.loginfo('start') 

        print("============ Printing robot state")
        print(robot.get_current_state())
        print("")

        ## armB pose

        pose_goal_B = Pose()
        pose_goal_B.position.x = 0.001
        pose_goal_B.position.y = 0.207
        pose_goal_B.position.z = 0.621

        pose_goal_B.orientation.x = 0.697
        pose_goal_B.orientation.y = 0.063
        pose_goal_B.orientation.z = 0.704
        pose_goal_B.orientation.w = -0.120
        


        
        self.group.set_pose_target(pose_goal_B,"wx200_arm_B/ee_arm_link")
        
        
        ## armA pose

        pose_goal_A = Pose()
        pose_goal_A.position.x = -0.125
        pose_goal_A.position.y = 0.010
        pose_goal_A.position.z = 0.608

        pose_goal_A.orientation.x = -0.056
        pose_goal_A.orientation.y = -0.806
        pose_goal_A.orientation.z = -0.055
        pose_goal_A.orientation.w = 0.587

        self.group.set_pose_target(pose_goal_A,"wx200_arm_A/ee_arm_link")
                   
        
        # self.group.set_named_target("testing_environment_home")


        # plan = self.group.go(wait=True)
        # self.group.execute(plan, wait=True)
        # self.group.set_goal_tolerance(0.1)
        self.group.set_planning_time(5)
        self.group.set_num_planning_attempts(10)
        self.group.set_planner_id('RRTConnect')
        pathcons = self.group.get_path_constraints()
        rospy.loginfo('pathcons')

        success, traj, p_time, errorcode = self.group.plan()
        self.group.execute(traj, wait=True)
        rospy.loginfo(errorcode) 
        # self.group.go()
        self.group.stop()                                  
        self.group.clear_pose_targets()
        # # Calling `stop()` ensures that there is no residual movement
        # move_group.stop()
        # It is always good to clear your targets after planning with poses.
        # Note: there is no equivalent function for clear_joint_value_targets()
        rospy.loginfo('finish') 
          

        



def main():
    # moveit_commander.roscpp_initialize(sys.argv)
    mover = MoveGroupPythonInterface()

    rospy.spin()

if __name__ == '__main__':
    main()